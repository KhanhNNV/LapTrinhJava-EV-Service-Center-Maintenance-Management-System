package edu.uth.evservice.EVService.services.impl;

import edu.uth.evservice.EVService.dto.NotificationDto;
import edu.uth.evservice.EVService.model.Notification;
import edu.uth.evservice.EVService.model.User;
import edu.uth.evservice.EVService.repositories.INotificationRepository;
import edu.uth.evservice.EVService.requests.NotificationRequest;
import edu.uth.evservice.EVService.services.INotificationService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

/**
 * NotificationServiceImpl
 * üëâ Th·ª±c hi·ªán c√°c nghi·ªáp v·ª• li√™n quan ƒë·∫øn th√¥ng b√°o (Notification)
 * H·ª£p nh·∫•t c·∫£ EmployeeNoti v√† CustomerNoti v√†o 1 service duy nh·∫•t
 */
@Service
@RequiredArgsConstructor
public class NotificationServiceImpl implements INotificationService {

    // Repository ƒë·ªÉ thao t√°c v·ªõi b·∫£ng "notifications"
    private final INotificationRepository notificationRepository;

    // EntityManager: cho ph√©p l·∫•y reference c·ªßa User m√† kh√¥ng c·∫ßn query th·∫≠t
    @PersistenceContext
    private final EntityManager em;

    // L·∫•y t·∫•t c·∫£ th√¥ng b√°o trong h·ªá th·ªëng
    @Override
    public List<NotificationDto> getAllNotifications() {
        return notificationRepository.findAll()
                .stream()
                .map(this::toDto)
                .collect(Collectors.toList());
    }

    // L·∫•y danh s√°ch th√¥ng b√°o c·ªßa 1 user (customer, employee, admin)
    @Override
    public List<NotificationDto> getNotificationsByUser(int userId) {
        User userRef = em.getReference(User.class, userId);
        return notificationRepository.findByReceiver(userRef)
                .stream()
                .map(this::toDto)
                .collect(Collectors.toList());
    }

    // L·∫•y chi ti·∫øt 1 th√¥ng b√°o theo ID
    @Override
    public NotificationDto getNotificationById(int id) {
        Notification noti = notificationRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Notification not found with id: " + id));
        return toDto(noti);
    }

    // T·∫°o m·ªõi 1 th√¥ng b√°o
    @Override
    public NotificationDto createNotification(NotificationRequest request) {
        // L·∫•y reference t·ªõi User theo userId
        User receiver = em.getReference(User.class, request.getUserId());

        // T·∫°o object Notification (ch∆∞a l∆∞u)
        Notification noti = new Notification();
        noti.setUser(receiver); // G√°n ng∆∞·ªùi nh·∫≠n th√¥ng b√°o
        noti.setTitle(request.getTitle()); // G√°n ti√™u ƒë·ªÅ
        noti.setMessage(request.getMessage());// G√°n n·ªôi dung
        noti.setIsRead(false); // M·∫∑c ƒë·ªãnh l√† ch∆∞a ƒë·ªçc

        // L∆∞u DB v√† tr·∫£ v·ªÅ DTO
        return toDto(notificationRepository.save(noti));
    }

    // ƒê√°nh d·∫•u 1 th√¥ng b√°o l√† "ƒë√£ ƒë·ªçc"
    @Override
    public NotificationDto markAsRead(int id) {
        Notification noti = notificationRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Notification not found with id: " + id));

        noti.setIsRead(true); // c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë·ªçc
        return toDto(notificationRepository.save(noti));
    }

    // X√≥a 1 th√¥ng b√°o kh·ªèi DB
    @Override
    public void deleteNotification(int id) {
        notificationRepository.deleteById(id);
    }

    /**
     * Chuy·ªÉn ƒë·ªïi t·ª´ Entity -> DTO
     * D√πng khi tr·∫£ d·ªØ li·ªáu ra ngo√†i API (·∫©n c√°c quan h·ªá ph·ª©c t·∫°p)
     **/
    private NotificationDto toDto(Notification n) {
        return NotificationDto.builder()
                .notificationId(n.getNotificationId()) // l·∫•y ID
                .userId(n.getUser().getUserId()) // l·∫•y ID ng∆∞·ªùi nh·∫≠n
                .title(n.getTitle()) // ti√™u ƒë·ªÅ
                .message(n.getMessage()) // n·ªôi dung
                .isRead(Boolean.TRUE.equals(n.getIsRead())) // convert Boolean -> boolean an to√†n
                .createdAt(n.getCreatedAt()) // th·ªùi gian t·∫°o
                .build();
    }
}
